##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

# Define the path to the JavaScript files
js_path "/etc/nginx/njs/";

# Define the proxy cache path, levels, and keys_zone
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m;

# Define the server to forward requests to
upstream originserver {
	server node-app:8081;
}

# Define the resolver for DNS resolution
resolver 127.0.0.11;

server {

    # Listen on port 80 for incoming requests
	listen 80 default_server;
	listen [::]:80 default_server;

    # Import the JavaScript module check-cookie.js, and define it as "master"
	js_import master from http/check-cookie.js;

    # Root directory for files to be served
	root /var/www/html;

    # server_name variable
	server_name _;
    
    # log the error to the specified file
	error_log /var/log/nginx/error.log debug;

    # internal location, only available on the local server
	location = /_setCookie {
		internal;
        
		# Run the JavaScript function GetHeader from the imported module
		js_content master.GetHeader;
	}

    # main location block
	location = / {

        # run an internal location
		auth_request /_setCookie;
        
        # set several variables
        auth_request_set $visitor $sent_http_x_fs_visitor;
		auth_request_set $experiences $sent_http_x_fs_experiences;
		auth_request_set $combination $sent_http_x_fs_combination;
		auth_request_set $combination_hash $sent_http_x_fs_combination_hash;
		auth_request_set $cookie $sent_http_x_set_cookie;

        # set headers for the proxied server
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable caching 
		proxy_buffering on;
		proxy_cache my_cache;
		proxy_cache_valid any 10m;
		
		# set proxy method
		proxy_method GET;
        
		# add some headers with the variables values
		add_header X-fs-visitor $visitor;
		add_header X-fs-experiences $experiences;
		add_header X-fs-combination $combination;
		add_header X-fs-combination-hash $combination_hash;

		# set cookie in the browser (combination not hashed for explanation purpose)
		add_header Set-Cookie $cookie;

		# set cache key (combination hashed)
		proxy_cache_key $combination_hash;
        
		default_type text/html;
        
        # Forward requests to the upstream server
		proxy_pass http://originserver/server;
	}
}

